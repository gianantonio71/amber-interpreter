#ifndef _PARSER_ZH_
#define _PARSER_ZH_

obj null();
obj mk_seq(obj first_element);
obj mk_seq(obj seq, obj tail_element);
obj mk_seq_empty();
void consume_decl(obj declaration);
obj mk_subtype_decl(obj subtype, obj supertype);
obj mk_test_block(bool enabled, obj instructions);
obj mk_test_instr_bool(obj expr);
obj mk_test_instr_print(obj expr);
obj mk_test_instr_loop(obj iterators, obj instructions);
obj mk_test_instr_assignment(obj var, obj expr);
obj mk_using_block(obj signatures, obj fndefs);
obj mk_using_block(obj type_params, obj signatures, obj fndefs);
obj mk_signature(obj const_name, obj ret_type);
obj mk_signature(obj fn_name, obj par_types, obj ret_type);
obj mk_typedef(obj name, obj pretypes);
obj mk_typedef_par(obj name, obj vars, obj pretypes);
obj mk_fndef(obj ret_type, obj fn_name, obj expr);
obj mk_fndef(obj ret_type, obj fn_name, obj fn_args, obj expr);
obj mk_fndef_switch(obj fn_name, obj fn_args, obj ret_type, obj branches);
obj mk_fndef_switch(obj fn_name, obj fn_args, obj ret_type, obj branches, obj local_fns);
obj mk_fndef_proc(obj fn_name, obj fn_args, obj ret_type, obj statements);
obj mk_fndef_proc(obj fn_name, obj fn_args, obj ret_type, obj statements, obj local_fns);
obj mk_fnarg(obj type, obj var);
obj mk_stmt_assignment(obj var, obj expr);
obj mk_stmt_typed_assignment(obj var, obj type, obj expr);
obj mk_stmt_assignment_if(obj var, obj expr, obj cond);
obj mk_stmt_return(obj expr);
obj mk_stmt_return_if(obj expr, obj cond);
obj mk_stmt_if(obj cond, obj statements, obj elifs);
obj mk_stmt_if(obj cond, obj statements, obj elifs, obj else_branch);
obj mk_stmt_loop(obj statements);
obj mk_stmt_loop(obj statements, obj condition);
obj mk_stmt_while(obj cond, obj statements);
obj mk_stmt_break();
obj mk_stmt_break_if(obj cond);
obj mk_stmt_fail();
obj mk_stmt_fail_if(obj cond);
obj mk_stmt_for(obj iters, obj statements);
obj mk_stmt_let(obj fndefs, obj statements);
obj mk_stmt_assert(obj expr);
obj mk_stmt_print(obj expr);
obj mk_stmt_print_if(obj expr, obj cond);
obj mk_elif(obj cond, obj statements);
obj mk_for_iter(obj var, obj seq);
obj mk_for_iter(obj var, obj idx_var, obj seq);
obj mk_for_iter_range(obj var, obj start_expr, obj end_expr);

obj mk_ptrn_type(obj type);
obj mk_ptrn_var(obj var);
obj mk_ptrn_ptrn_var(obj pattern, obj var);
obj mk_ptrn_ctor(obj symb);
obj mk_ptrn_num(obj num);
obj mk_ptrn_jolly();
obj mk_ptrn_expr(obj var);
obj mk_ptrn_tuple(obj labptrns, bool open);
obj mk_ptrn_tag_ptrn(obj tag, obj ptrn);
obj mk_ptrn_tag_obj(obj tag_var, obj obj_var);
obj mk_lab_ptrn(obj lab, obj ptrn);

obj mk_type_ref(obj name);
obj mk_type_var(obj var_name);
obj mk_type_ref(obj name, obj type_pars);
obj mk_type_inline(obj pretypes);
obj mk_type_any();
obj mk_type_symb();
obj mk_type_int();
obj mk_type_low_bounded_int(obj min);
obj mk_type_up_bounded_int(obj max);
obj mk_type_bounded_int(obj min, obj max);
obj mk_type_seq(obj type, bool nonempty);
obj mk_type_fixed_seq(obj pretypes);
obj mk_type_set(obj elem_type, bool nonempty);
obj mk_type_map(obj key_type, obj value_type);
obj mk_type_tuple(obj lab_types);
obj mk_type_tagged_obj(obj tag_type, obj obj_type);
obj mk_pretype_type(obj type);
obj mk_pretype_empty_set();
obj mk_pretype_empty_seq();
obj mk_pretype_empty_map();
obj mk_pretype_sing(obj symb);
obj mk_pretype_tagged_obj(obj tag, obj obj);
obj mk_pretype_tagged_tuple(obj tag, obj lab_types);
obj mk_labtype(obj lab, obj type, bool optional);

obj mk_expr_ctor(obj symb);
obj mk_expr_num(obj num);
obj mk_expr_str(obj str);
obj mk_expr_empty_set();
obj mk_expr_set(obj subexprs);
obj mk_expr_term(obj top_symb, obj subexprs);
obj mk_expr_rep_term(obj top_symb, obj reps, obj subexprs);
obj mk_expr_lab_tuple(obj labexprs);
obj mk_expr_lab_set(obj lab, obj set);
obj mk_expr_const_or_var(obj const_or_var_name);
obj mk_expr_fn_call(obj fn_name, obj params);
obj mk_expr_builtin_call(obj builtin_name, obj params);
obj mk_expr_empty_seq();
obj mk_expr_seq(obj exprs);
obj mk_expr_seq(obj firsts, obj rest);
obj mk_expr_empty_map();
obj mk_expr_map(obj entries);
obj mk_expr_tuple(obj labexprs);
obj mk_expr_tag_obj(obj tag_expr, obj obj_expr);
obj mk_expr_tag_map(obj tag, obj labexprs);
obj mk_expr_op(obj op, obj val);
obj mk_expr_op(obj op, obj val1, obj val2);
obj mk_expr_and(obj expr1, obj expr2);
obj mk_expr_or(obj expr1, obj expr2);
obj mk_expr_not(obj expr);
obj mk_expr_eq(obj expr1, obj expr2);
obj mk_expr_neq(obj expr1, obj expr2);
obj mk_expr_type_test(obj e, obj t);
obj mk_expr_dot_acc(obj expr, obj name);
obj mk_expr_dot_acc_test(obj expr, obj name);
obj mk_expr_dot_acc_star(obj expr);
obj mk_expr_idx(obj var_or_const, obj exprs);
obj mk_expr_idx_member(obj expr, obj name, obj exprs);
obj mk_expr_ex_qual(obj clauses);
obj mk_expr_ex_qual(obj clauses, obj sel_exprs);
obj mk_expr_sc(obj expr, obj clauses);
obj mk_expr_sc(obj expr, obj clauses, obj sel_exprs);
obj mk_expr_tc(obj top_label, obj expr, obj clauses);
obj mk_expr_tc(obj top_label, obj expr, obj clauses, obj sel_exprs);
obj mk_expr_mc(obj key_expr, obj val_expr, obj clauses);
obj mk_expr_mc(obj key_expr, obj val_expr, obj clauses, obj sel_exprs);
obj mk_expr_lc(obj expr, obj var_name, obj src_expr);
obj mk_expr_lc(obj expr, obj var_name, obj idx_var_name, obj src_expr);
obj mk_expr_flc(obj expr, obj var_name, obj src_expr, obj sel_expr);
obj mk_expr_flc(obj expr, obj var_name, obj idx_var_name, obj src_expr, obj sel_expr);
obj mk_expr_if(obj branches, obj else_expr);
obj mk_expr_match(obj exprs, obj branches);
obj mk_expr_do(obj statements);
obj mk_expr_match(obj ptrn, obj matched_expr, obj expr);
obj mk_expr_repl(obj ptrn, obj src_expr, obj rep_expr);
obj mk_expr_sel(obj type, obj expr);
obj mk_expr_retr(obj expr, obj ptrn, obj src);
obj mk_expr_retr(obj expr, obj ptrn, obj src, obj cond);
obj mk_expr_is(obj expr, obj type);
obj mk_expr_where(obj expr, obj fndefs);
obj mk_expr_let(obj expr, obj statements);
obj mk_sexpr_expr(obj expr);
obj mk_sexpr_lab(obj lab, obj expr);
obj mk_sexpr_cond(obj value, obj cond);
obj mk_sexpr_lab_cond(obj lab, obj expr, obj cond);
obj mk_if_branch(obj cond, obj value);
obj mk_match_branch(obj ptrns, obj expr);
obj mk_clause_in(obj ptrn, obj src_expr);
obj mk_clause_in_map(obj key_ptrn, obj value_ptrn, obj src_expr);
obj mk_clause_not_in(obj ptrn, obj src_expr);
obj mk_clause_not_in_map(obj key_ptrn, obj value_ptrn, obj src_expr);
obj mk_clause_eq(obj var, obj expr);
obj mk_clause_and(obj clauses);
obj mk_clause_or(obj clause1, obj clause2);
obj mk_map_entry(obj expr1, obj expr2);
obj mk_map_entry_cond(obj expr1, obj expr2, obj cond);
obj mk_snum_neg_num(obj num);

#endif
